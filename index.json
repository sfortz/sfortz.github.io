[{"authors":null,"categories":null,"content":"My name is Sophie Fortz and I am a postdoctoral researcher specializing in software engineering at the University of Namur. My research is conducted under the expert guidance of Dr. Gilles Perrouin and Prof. Patrick Heymans. Additionally, I hold membership in the PReCISE research center and the Namur Digital Institute.\nMy academic trajectory began with an initial year of PhD funded by the FNRS EoS (Excellence of Science) VeriLearn project, before I secured a competitive FRIA (FNRS) Grant.\nMy doctoral thesis, “LIFTS: Learning Featured Transition Systems”, reflects my passion for exploring topics such as variability-intensive systems, behavioral modeling, model-based software testing, AI4SE and SE4AI.\nCurrently, I have returned to the EoS VeriLearn project for a brief postdoctoral appointment before transitioning to a new chapter in my academic journey. I am excited to join Professor Mohammad Reza Mousavi’s team at King’s College, London, where I will be focusing on testing techniques for quantum programs.\nOn my spare hours, I like to read and follow drawing/painting classes. I was also an active member of the Belgian Guide Federation for years, where I have been successively girl guide, group leader and trainer.\n","date":1693267200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1693267200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"My name is Sophie Fortz and I am a postdoctoral researcher specializing in software engineering at the University of Namur. My research is conducted under the expert guidance of Dr. Gilles Perrouin and Prof.","tags":null,"title":"Sophie Fortz","type":"authors"},{"authors":["Sophie Fortz"],"categories":[],"content":"","date":1693267200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1693267200,"objectID":"b72905f1b14a566b4b16cfbf3db2f275","permalink":"https://sfortz.github.io/publication/2023-lifts-ds/","publishdate":"2023-08-29T00:00:00Z","relpermalink":"/publication/2023-lifts-ds/","section":"publication","summary":"Addressing variability proactively during software engineering activities means shifting from reasoning on individual systems to reasoning on families of systems. Adopting appropriate variability management techniques can yield important economies of scale and quality improvements. Conversely, variability can also be a curse, especially for Quality Assurance (QA), i.e., verification and testing of such systems, due to the combinatorial explosion of the number of software variants. Featured Transition Systems (FTSs) were introduced as a way to represent and reason about the behaviour of Variaility-intensive Systems (VISs). By labelling a transition system with feature expressions, FTSs capture multiple variants of a system in a single model, enabling reasoning at the family level. They have shown significant improvements in automated QA activities such as model-checking and model-based testing, as well as guiding design exploration activities. Yet, as most model-based approaches, FTS modelling requires both strong human expertise and significant effort that would be unaffordable in many cases, in particular for large legacy systems with outdated specifications and/or systems that evolve continuously.Therefore, this PhD project aims to automatically learn FTSs from existing artefacts, to ease the burden of modelling FTS and support continuous QA activities. To answer this research challenge, we propose a two-phase approach. First, we rely on deep learning techniques to locate variability from execution traces. For this purpose, we implemented a tool called VaryMinions. Then, we use these annotated traces to learn an FTS. In this second part, we adapt the seminal L algorithm to learn behavioural variability. Both frameworks are open-source and we evaluated them separately on several datasets of different sizes and origins (e.g., software product lines and configurable business processes).","tags":["Featured Transition Systems","Software Product Lines","Variability Mining","Active Automata Learning","Reverse Engineering"],"title":"Doctoral Symposium: Variability-Aware Behavioural Learning","type":"publication"},{"authors":["Edilton Lima dos Santos","Sophie Fortz","Pierre-Yves Schobbens","Gilles Perrouin"],"categories":[],"content":"","date":1660867200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1660867200,"objectID":"279dddf8b4a6af9a9bef566c78b0343a","permalink":"https://sfortz.github.io/publication/2022-bm-ecsa/","publishdate":"2022-09-12T15:47:27+02:00","relpermalink":"/publication/2022-bm-ecsa/","section":"publication","summary":"","tags":[],"title":"Behavioral Maps: Identifying Architectural Smells in Self-adaptive Systems at Runtime","type":"publication"},{"authors":["Edilton Lima dos Santos","Sophie Fortz","Pierre-Yves Schobbens","Gilles Perrouin"],"categories":[],"content":"","date":1654646400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1654646400,"objectID":"169b46e93f1f1f9ac34a2bd6612e1224","permalink":"https://sfortz.github.io/publication/2022-bm-cal/","publishdate":"2022-09-12T15:47:18+02:00","relpermalink":"/publication/2022-bm-cal/","section":"publication","summary":"","tags":[],"title":"Identifying Architectural Smells in Self-Adaptive Systems at Runtime","type":"publication"},{"authors":["Edilton Lima dos Santos","Sophie Fortz","Gilles Perrouin","Pierre-Yves Schobbens"],"categories":[],"content":"","date":1631491200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1631491200,"objectID":"f1de5d5d4fa8fe571f25e70c689a587c","permalink":"https://sfortz.github.io/publication/2021-bm-casa/","publishdate":"2021-09-13T00:00:00Z","relpermalink":"/publication/2021-bm-casa/","section":"publication","summary":"Self-adaptive systems can be implemented as Dynamic Software Product Lines (DSPLs) via dynamically enabling or disabling features at runtime based on a feature model. However, the runtime (re) configuration may negatively impact the system’s architectural qualities, exhibiting architectural bad smells. Such smells may appear in only very specific runtime conditions, and the combinatorial explosion of the number of configurations induced by features makes exhaustive analysis intractable. We are therefore targeting smell detection at runtime for one specific configuration determined through a MAPE-K loop. To support smell detection, we propose the Behavioral Map (BM) formalism to derive automatically key architectural characteristics from different sources (feature model, source code, and other deployment artifacts) and represent them in a graph. We provide identification guidelines based on the BM for four architectural smells and illustrate the approach on Smart Home Environment (SHE) DSPL.","tags":["Architectural Smells","Dynamic Software Product Lines","Runtime Validation","Self-adaptive Systems"],"title":"A Vision to identify Architectural Smells in Self-Adaptive Systems using Behavioral Maps","type":"publication"},{"authors":["Sophie Fortz"],"categories":[],"content":"","date":1630886400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630886400,"objectID":"8baf26d531c23d06d3f2db6a4a2f1dbf","permalink":"https://sfortz.github.io/publication/2021-lifts-ds/","publishdate":"2021-09-06T00:00:00Z","relpermalink":"/publication/2021-lifts-ds/","section":"publication","summary":"This PhD project aims to automatically learn transition systems capturing the behaviour of a whole family of software-based systems. Reasoning at the family level yields important economies of scale and quality improvements for a broad range of systems such as software product lines, adaptive and configurable systems. Yet, to fully benefit from the above advantages, a model of the system family's behaviour is necessary. Such a model is often prohibitively expensive to create manually due to the number of variants. For large long-lived systems with outdated specifications or for systems that continuously adapt, the modelling cost is even higher. Therefore, this PhD proposes to automate the learning of such models from existing artefacts. To advance research at a fundamental level, our learning target are Featured Transition Systems (FTS), an abstract formalism that can be used to provide a pivot semantics to a range of variability-aware state-based modelling languages. The main research questions addressed by this PhD project are: (1) Can we learn variability-aware models efficiently? (2) Can we learn FTS in a black-box fashion? (i.e., with access to execution logs but not to source code); (3) Can we learn FTS in a white/grey-box testing fashion? (i.e., with access to source code); and (4) How do the proposed techniques scale in practice?","tags":["Software reverse engineering","Featured Transition Systems","Software Product Lines","Variability Mining","Active Automata Learning","Model Learning"],"title":"Doctoral Symposium: LIFTS: learning featured transition systems","type":"publication"},{"authors":["Sophie Fortz","Paul Temple","Xavier Devroey","Gilles Perrouin","Patrick Heymans"],"categories":[],"content":"","date":1629676800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1629676800,"objectID":"253f2843083f0a58fe5c91a6ab51a46b","permalink":"https://sfortz.github.io/publication/2021-varyminions/","publishdate":"2021-08-23T00:00:00Z","relpermalink":"/publication/2021-varyminions/","section":"publication","summary":"Business processes have to manage variability in their execution, e.g., to deliver the correct building permit in different municipalities. This variability is visible in event logs, where sequences of events are shared by the core process (building permit authorisation) but may also be specific to each municipality. To rationalise resources (e.g., derive a configurable business process capturing all municipalities’ permit variants) or to debug anomalous behaviour, it is mandatory to identify to which variant a given trace belongs. This paper supports this task by training Long Short Term Memory (LSTMs) and Gated Recurrent Units (GRUs) algorithms on two datasets: a configurable municipality and a travel expenses workflow. We demonstrate that variability can be identified accurately (\u003e87%) and discuss the challenges of learning highly entangled variants.","tags":["Software reverse engineering","Configurable processes","Recurrent Neural Networks","Variability Mining"],"title":"VaryMinions: leveraging RNNs to identify variants in event logs","type":"publication"},{"authors":["Sophie Fortz","Fred Mesnard","Etienne Payet","Gilles Perrouin","Wim Vanhoof","German Vidal"],"categories":[],"content":"","date":1599004800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599004800,"objectID":"ae31088857b962ea1ccecbbbc183137f","permalink":"https://sfortz.github.io/publication/2020-concolic/","publishdate":"1970-01-01T01:33:40+01:00","relpermalink":"/publication/2020-concolic/","section":"publication","summary":"Concolic testing combines symbolic and concrete execution to generate test cases that achieve a good program coverage. Its benefits have been demonstrated for more than 15 years in the case of imperative programs. In this work, we present a concolic-based test generation tool for logic programs which exploits SMT-solving for constraint resolution.","tags":["Concolic Testing","Logic Programming","SAT/SMT solving"],"title":"An SMT-based concolic testing tool for logic programs","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"abf2d6060672e686dc49bf1322997023","permalink":"https://sfortz.github.io/cslabs/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/cslabs/","section":"","summary":"CSLabs","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"24b7a9e8d7efb094b85ebfff210eaf2b","permalink":"https://sfortz.github.io/guides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/guides/","section":"","summary":"Pages for Guides' stuffs","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"b8c4321eb8a369158c8e08358ffb222f","permalink":"https://sfortz.github.io/painting/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/painting/","section":"","summary":"Pages for paintings and drawings","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"139b1c6f40df331982e69ed8946c6942","permalink":"https://sfortz.github.io/poster/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/poster/","section":"","summary":"Poster","tags":null,"title":"","type":"widget_page"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"ec42ae207fcfce3aee0c0f7bb63fa788","permalink":"https://sfortz.github.io/valencia/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/valencia/","section":"","summary":"Valencia","tags":null,"title":"","type":"widget_page"}]